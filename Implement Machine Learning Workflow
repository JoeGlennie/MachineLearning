First, I will post my formula's predictions for every game in week 6 (October 13-14, 2024). After that, I will post the NFL Elo model's predictions based on the ALC's spreads. I hypothesize that I will need to reduce my formula's reliance on scoring defense rating and increase the weighting for the opponents' coaching staff.

My formula's predictions                       NFL Elo model                        Actual Results                     Formula Margin of Error                NFL ELO Margin of Error

Browns    18.575                                 16.5                                  16                                    +2.075                                  +0.5
Eagles    28.825                                 26                                    20                                    +8.825                                  +6.0

Falcons   29.5                                   25.5                                  38                                    -8.5                                   -12.5
Panthers  21.625                                 21                                    20                                    +1.625                                  +1.0

Colts     20.85                                  20.25                                 20                                    +0.85                                   +0.25                                
Titans    25.6                                   22.75                                 17                                    +8.6                                    +5.75

Bengals   25.2                                   25                                    17                                    +8.2                                    +8
Giants    25.7                                   22                                     7                                    +18.7                                   +15

Steelers  25.55                                  20                                    32                                    -6.45                                   -12
Raiders   13.425                                 17                                    13                                    +0.425                                  +4.0

Chargers  15.825                                 18.25                                 23                                    +7.175                                  +4.75
Broncos   14.95                                  17.25                                 16                                    +1.05                                   -1.25

Buccaneers 22.15                                 22.75                                 51                                    -28.75                                   -28.25
Saints     20.275                                19.25                                 27                                    -6.725                                   -7.75

Texans     21.2                                  21.75                                 41                                    -19.80                                   -19.25
Patriots   16.575                                15.75                                 21                                    -4.425                                   -5.25                              

Jaguars    19.75                                 21.25                                 16                                    +3.75                                    +5.25
Bears      26.5                                  22.75                                 35                                    -8.5                                     -12.25

Bills      21.2                                  21.75                                 23                                    -1.8                                     -1.25 
Jets       17.45                                 19.25                                 20                                    -2.55                                    -0.75

Commanders 23.45                                 21.5                                  23                                   +0.45                                     +1.5
Ravens     32.95                                 30                                    30                                   +2.95                                      0.0

Cardinals  20.25                                 21.25                                 13                                   +7.25                                     +8.25
Packers    30.25                                 26.25                                 34                                   -3.75                                     -7.75

Lions      30.475                                27                                    47                                  -16.525                                    -20.0
Cowboys    24.6                                  25.5                                   9                                   +15.6                                     +16.5

October 13, 2024, 10:47 AM EST- Since the Giants' top wide receiver and running back will not be playing on Sunday, I believe the oddsmakers' prediction will be more accurate than my own. 

For this week's analysis, I will include the outliers. In future weeks, I may remove them.                               Margin of Error                           Margin of Error

                                                                                                                            -44.45                                     -56.75

I don't think calculating the net margin of error that way is helpful, so I also calculated the total margins of error.
                                                                                                                            195.40                                      199.75           
The ALC provides much better odds with the moneyline option than simply predicting the winner of each game. With moneyline, a team needs to win by at least four points. I've never been able to predict ties in football, so I will only predict outright winners. 

For week 6, I was able to predict 8 of the outright wins. The Elo model predicted 6 of the outright wins.

For week 7, I will probably adjust my forecasts if there are any last minute injury updates for superstars. 

It looks like I underestimated the scores for a lot of teams. For the most part, the formula worked well for predicting outright winners. It certainly won't work for hockey, so that just leaves football and basketball.

Week 7

Broncos    22.15                                18.75
Saints     15.40          12.40                 18.25

Dolphins   22.85                                21.0
Colts      24.35                                23.5

Jets       14.075         17.075                 18
Steelers   20.45                                20.5

Eagles     22.45                                22.75
Giants     19.82                                19.75

Lions      23.7                                 25.5
Vikings    22.7                                 24.5

Bengals    22.725                               23.5
Browns     20.95                                18

Patriots   23.225                               18.75
Jaguars    26.85                                23.75

Panthers   23.275                               22.0
Commanders 35.15                                29.5

Titans     14.325                               16
Bills      25.95                                24.5

Raiders    22.8                                 19.0 
Rams       30.05                                24.5

Chiefs     24.425                              22.75
49ers      23.3                                24.25

Seahawks   25.025                               24.5
Falcons    30.27                                 27

Texans      25.575                             26.25
Packers     21.575                             21.25

Chargers    27.475                             23.25
Cardinals   18.35                              22.25

Ravens      29.1                                 26
Buccaneers  25.35                                22.5

October 16, 2024- Since the Jets added Davante Adams a couple days ago, I have added my new projection to the right of my original prediction. 

So far, the only examples I've found online only work with binary outcomes, so I don't think machine learning will help predict the number of points teams will score.

9:55 AM ET, October 17, 2024- I updated the Saints output because their two good wide receivers have been ruled out.

It seems the formula is way too simple to be turned into a machine learning project. I noticed that lots of other people already completed machine learning projects to try to do the same thing. I think I would need to import all of the NFL's raw data from the past 100 years to need to complete all 600+ possible steps machine learning may require. 

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime
import seaborn as sns

# required machine learning packages
from sklearn import model_selection
from sklearn.feature_selection import RFE
from sklearn.metrics import brier_score_loss, roc_auc_score
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.linear_model import LogisticRegression
from sklearn.calibration import CalibratedClassifierCV as CCV
from sklearn.svm import LinearSVC, SVC
from sklearn.neural_network import MLPClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, VotingClassifier
import xgboost as xgb

from sklearn import metrics
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import learning_curve
from sklearn.model_selection import ShuffleSplit

import warnings
with warnings.catch_warnings():
    warnings.filterwarnings("ignore",category=DeprecationWarning)

# fixing some schedule_week column errors and converting column to integer data type
df.loc[(df.schedule_week == '18'), 'schedule_week'] = '17'
df.loc[(df.schedule_week == 'Wildcard') | (df.schedule_week == 'WildCard'), 'schedule_week'] = '18'
df.loc[(df.schedule_week == 'Division'), 'schedule_week'] = '19'
df.loc[(df.schedule_week == 'Conference'), 'schedule_week'] = '20'
df.loc[(df.schedule_week == 'Superbowl') | (df.schedule_week == 'SuperBowl'), 'schedule_week'] = '21'
df['schedule_week'] = df.schedule_week.astype(int)
# Cleaning games_elo and df to merge correctly
wsh_map = {'WSH' : 'WAS'}
games_elo.loc[games_elo.team1 == 'WSH', 'team1'] = 'WAS' 
games_elo.loc[games_elo.team2 == 'WSH', 'team2'] = 'WAS'

# fix dates
df.loc[(df.schedule_date == '2016-09-19') & (df.team_home == 'MIN'), 'schedule_date'] = datetime.datetime(2016, 9, 18)
df.loc[(df.schedule_date == '2017-01-22') & (df.schedule_week == 21), 'schedule_date'] = datetime.datetime(2017, 2, 5)
df.loc[(df.schedule_date == '1990-01-27') & (df.schedule_week == 21), 'schedule_date'] = datetime.datetime(1990, 1, 28)
df.loc[(df.schedule_date == '1990-01-13'), 'schedule_date'] = datetime.datetime(1990, 1, 14)
games_elo.loc[(games_elo.date == '2016-01-09'), 'date'] = datetime.datetime(2016, 1, 10)
games_elo.loc[(games_elo.date == '2016-01-08'), 'date'] = datetime.datetime(2016, 1, 9)
games_elo.loc[(games_elo.date == '2016-01-16'), 'date'] = datetime.datetime(2016, 1, 17)
games_elo.loc[(games_elo.date == '2016-01-15'), 'date'] = datetime.datetime(2016, 1, 16)
# Drop season before 2000
df = df.drop(df[df.schedule_season < 2000].index)

# Current Win-Loss% and Last season Win-Loss%
# A very hacky method could take a few minutes
for team in teams.team_id.unique().tolist():
    for season in range(2000,2019): 
        
        wins, games_played = 0., 0.
        
        for week in range(1,18):
            current_game = df[((df.team_home == team) | (df.team_away == team)) & (df.schedule_season == season) & (df.schedule_week == week)]
            
            # If a game exists
            if(current_game.shape[0] == 1):
                current_game = current_game.iloc[0]
                
    
                if ((current_game.team_home == team) & (current_game.score_home > current_game.score_away)):
                    wins += 1
                    
                elif ((current_game.team_away == team) & (current_game.score_away > current_game.score_home)):
                    wins += 1
                
                # If not a tie count game as part of record
                if(current_game.score_away != current_game.score_home):
                    games_played += 1
                
                # If week one put default record as 0
                if(week == 1):
                    if(current_game.team_home == team):
                        df.loc[(df.team_home == team) & (df.schedule_season == season) & (df.schedule_week == week), 'team_home_current_win_pct'] = 0 
                    else:
                        df.loc[(df.team_away == team) & (df.schedule_season == season) & (df.schedule_week == week), 'team_away_current_win_pct'] = 0 

            # Put record for next week game and account for bye week
            next_week_game = df[((df.team_home == team) | (df.team_away == team)) & (df.schedule_season == season) & (df.schedule_week == week+1)]
            # If a game exists
            if(next_week_game.shape[0] == 1):
                next_week_game = next_week_game.iloc[0]
                if(next_week_game.team_home == team):
                    df.loc[(df.team_home == team) & (df.schedule_season == season) & (df.schedule_week == week+1), 'team_home_current_win_pct'] = 0 if games_played == 0 else wins/games_played
                else:
                    df.loc[(df.team_away == team) & (df.schedule_season == season) & (df.schedule_week == week+1), 'team_away_current_win_pct'] = 0 if games_played == 0 else wins/games_played
            else: # Bye week
                next_twoweek_game = df[((df.team_home == team) | (df.team_away == team)) & (df.schedule_season == season) & (df.schedule_week == week+2)]
                # If a game exists
                if(next_twoweek_game.shape[0] == 1):
                    next_twoweek_game = next_twoweek_game.iloc[0]
                    if(next_twoweek_game.team_home == team):
                        df.loc[(df.team_home == team) & (df.schedule_season == season) & (df.schedule_week == week+2), 'team_home_current_win_pct'] = 0 if games_played == 0 else wins/games_played
                    else:
                        df.loc[(df.team_away == team) & (df.schedule_season == season) & (df.schedule_week == week+2), 'team_away_current_win_pct'] = 0 if games_played == 0 else wins/games_played

                    
        # if beyond week 17 (playoffs use season record)
        for postseason_week in range(18,22):
            current_game = df[((df.team_home == team) | (df.team_away == team)) & (df.schedule_season == season) & (df.schedule_week == postseason_week)]
            # If a game exists
            if(current_game.shape[0] == 1):
                current_game = current_game.iloc[0]
                if(current_game.team_home == team):
                    df.loc[(df.team_home == team) & (df.schedule_season == season) & (df.schedule_week == postseason_week), 'team_home_current_win_pct'] = 0 if games_played == 0 else wins/games_played
                else:
                    df.loc[(df.team_away == team) & (df.schedule_season == season) & (df.schedule_week == postseason_week), 'team_away_current_win_pct'] = 0 if games_played == 0 else wins/games_played
           
        # if week 17 put current in next season
        # if last season is 2000 (no record) put in as 
        next_season = season+1
        for week in range(1,22):
            next_season_game = df[((df.team_home == team) | (df.team_away == team)) & (df.schedule_season == next_season) & (df.schedule_week == week)]
            if(next_season_game.shape[0] == 1):
                next_season_game = next_season_game.iloc[0]
                if(next_season_game.team_home == team):
                    df.loc[(df.team_home == team) & (df.schedule_season == next_season) & (df.schedule_week == week), 'team_home_lastseason_win_pct'] = 0 if games_played == 0 else wins/games_played
                elif(next_season_game.team_away == team):
                    df.loc[(df.team_away == team) & (df.schedule_season == next_season) & (df.schedule_week == week), 'team_away_lastseason_win_pct'] = 0 if games_played == 0 else wins/games_played

df = df.merge(games_elo[['date', 'team1', 'team2', 'elo_prob1', 'elo_prob2']], 
                      left_on=['schedule_date', 'team_home', 'team_away'], right_on=['date', 'team1', 'team2'], how='left')

# merge to fix neutral games where team_home and team_away are switched
games_elo2 = games_elo.rename(columns={'team1' : 'team2', 
                                       'team2' : 'team1', 
                                       'elo1' : 'elo2', 
                                       'elo2' : 'elo1',
                                       'elo_prob1' : 'elo_prob2', 
                                       'elo_prob2' : 'elo_prob1'})

df = df.merge(games_elo2[['date', 'team1', 'team2', 'elo_prob1', 'elo_prob2']], 
                      left_on=['schedule_date', 'team_home', 'team_away'], right_on=['date', 'team1', 'team2'], how='left')
df.columns.values
array(['schedule_date', 'schedule_season', 'schedule_week',
       'schedule_playoff', 'team_home', 'score_home', 'score_away',
       'team_away', 'team_favorite_id', 'spread_favorite',
       'over_under_line', 'stadium', 'stadium_neutral',
       'weather_temperature', 'weather_wind_mph', 'weather_humidity',
       'weather_detail', 'home_favorite', 'away_favorite', 'over',
       'team_away_current_win_pct', 'team_home_current_win_pct',
       'team_home_lastseason_win_pct', 'team_away_lastseason_win_pct',
       'team_home_division', 'team_away_division', 'division_game',
       'date_x', 'team1_x', 'team2_x', 'elo_prob1_x', 'elo_prob2_x',
       'date_y', 'team1_y', 'team2_y', 'elo_prob1_y', 'elo_prob2_y'], dtype=object)
# separating merged columns into x and y cols
x_cols = ['date_x', 'team1_x', 'team2_x', 'elo_prob1_x', 'elo_prob2_x']
y_cols = ['date_y', 'team1_y', 'team2_y', 'elo_prob1_y','elo_prob2_y']

# filling null values for games_elo merged cols
for x, y in zip(x_cols, y_cols):
    df[x] = df[x].fillna(df[y]) 
    
df = df[['schedule_date', 'schedule_season', 'schedule_week',
       'schedule_playoff', 'team_home', 'score_home', 'score_away',
       'team_away', 'team_favorite_id', 'spread_favorite',
       'over_under_line', 'stadium', 'stadium_neutral',
       'weather_temperature', 'weather_wind_mph', 'weather_humidity',
       'weather_detail', 'home_favorite', 'away_favorite', 'over',
       'team_away_current_win_pct', 'team_home_current_win_pct',
       'team_home_lastseason_win_pct', 'team_away_lastseason_win_pct',
       'team_home_division', 'team_away_division', 'division_game',
        'elo_prob1_x', 'elo_prob2_x']]

# remove _x ending from column names
df.columns = df.columns.str.replace('_x', '')
# Drop column where there are eno Elo information
df = df.dropna(subset=['elo_prob1', 'elo_prob2'])
# creating result column df.loc[(df.score_home > df.score_away), 'result'
df['result'] = (df.score_home > df.score_away).astype(int)
# creating home favorite and away favorite columns (fill na with 0's)
df.loc[df.team_favorite_id == df.team_home, 'home_favorite'] = 1
df.loc[df.team_favorite_id == df.team_away, 'away_favorite'] = 1
df.home_favorite.fillna(0, inplace=True)
df.away_favorite.fillna(0, inplace=True)
# Change boolean column to 0/1
df.division_game = df.division_game.astype(int)
df.home_favorite = df.home_favorite.astype(int)
df.away_favorite = df.away_favorite.astype(int)
Export preprocessed data to CSV
df.to_csv(path+"data_preprocessed.csv", index=False)
# Read preprocessed csv file so don't have to run data preprocessing again
df = pd.read_csv(path+"data_preprocessed.csv")
Exploratory Data Analysis
df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 4783 entries, 0 to 4782
Data columns (total 30 columns):
schedule_date                   4783 non-null object
schedule_season                 4783 non-null int64
schedule_week                   4783 non-null int64
schedule_playoff                4783 non-null int64
team_home                       4783 non-null object
score_home                      4783 non-null float64
score_away                      4783 non-null float64
team_away                       4783 non-null object
team_favorite_id                4783 non-null object
spread_favorite                 4783 non-null float64
over_under_line                 4783 non-null float64
stadium                         4783 non-null object
stadium_neutral                 4783 non-null int64
weather_temperature             4672 non-null float64
weather_wind_mph                4672 non-null float64
weather_humidity                2431 non-null float64
weather_detail                  1342 non-null object
home_favorite                   4783 non-null int64
away_favorite                   4783 non-null int64
over                            4783 non-null float64
team_away_current_win_pct       4783 non-null float64
team_home_current_win_pct       4783 non-null float64
team_home_lastseason_win_pct    4783 non-null float64
team_away_lastseason_win_pct    4783 non-null float64
team_home_division              4783 non-null object
team_away_division              4783 non-null object
division_game                   4783 non-null int64
elo_prob1                       4783 non-null float64
elo_prob2                       4783 non-null float64
result                          4783 non-null int64
dtypes: float64(14), int64(8), object(8)
memory usage: 1.1+ MB
df.columns.values
array(['schedule_date', 'schedule_season', 'schedule_week',
       'schedule_playoff', 'team_home', 'score_home', 'score_away',
       'team_away', 'team_favorite_id', 'spread_favorite',
       'over_under_line', 'stadium', 'stadium_neutral',
       'weather_temperature', 'weather_wind_mph', 'weather_humidity',
       'weather_detail', 'home_favorite', 'away_favorite', 'over',
       'team_away_current_win_pct', 'team_home_current_win_pct',
       'team_home_lastseason_win_pct', 'team_away_lastseason_win_pct',
       'team_home_division', 'team_away_division', 'division_game',
       'elo_prob1', 'elo_prob2', 'result'], dtype=object) 

home_win = "{:.2f}".format((sum((df.result == 1) & (df.stadium_neutral == 0)) / sum(df.stadium_neutral == 0)) * 100)
# away_win = "{:.2f}".format((sum((df.result == 0) & (df.stadium_neutral == 0)) / len(df)) * 100)
away_win = "{:.2f}".format((sum((df.result == 0) & (df.stadium_neutral == 0)) / sum(df.stadium_neutral == 0)) * 100)

under_line = "{:.2f}".format((sum((df.score_home + df.score_away) < df.over_under_line) / len(df)) * 100)
over_line = "{:.2f}".format((sum((df.score_home + df.score_away) > df.over_under_line) / len(df)) * 100)
equal_line = "{:.2f}".format((sum((df.score_home + df.score_away) == df.over_under_line) / len(df)) * 100)

favored = "{:.2f}".format((sum(((df.home_favorite == 1) & (df.result == 1)) | ((df.away_favorite == 1) & (df.result == 0)))
                           / len(df)) * 100)


cover = "{:.2f}".format((sum(((df.home_favorite == 1) & ((df.score_away - df.score_home) < df.spread_favorite)) | 
                             ((df.away_favorite == 1) & ((df.score_home - df.score_away) < df.spread_favorite))) # use score_home - score_away because the fav are swap
                         / len(df)) * 100)

ats = "{:.2f}".format((sum(((df.home_favorite == 1) & ((df.score_away - df.score_home) > df.spread_favorite)) | 
                           ((df.away_favorite == 1) & ((df.score_home - df.score_away) > df.spread_favorite))) 
                       / len(df)) * 100)
# print all percentages
print("Number of Games: " + str(len(df)))
print("Home Straight Up Win Percentage: " + home_win + "%")
print("Away Straight Up Win Percentage: " + away_win + "%")
print("Under Percentage: " + under_line + "%")
print("Over Percentage: " + over_line + "%")
print("Equal Percentage: " + equal_line + "%")
print("Favored Win Percentage: " + favored + "%")
print("Cover The Spread Percentage: " + cover + "%")
print("Against The Spread Percentage: " + ats + "%")
Number of Games: 4783
Home Straight Up Win Percentage: 57.57%
Away Straight Up Win Percentage: 42.43%
Under Percentage: 49.70%
Over Percentage: 48.55%
Equal Percentage: 1.76%
Favored Win Percentage: 65.96%
Cover The Spread Percentage: 46.96%
Against The Spread Percentage: 49.32%
pd.set_option('display.max_columns', 500)
df.head()
